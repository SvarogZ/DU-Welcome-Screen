{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"------------------------------\n---- CUSTOM VARIABLES ---------\n-------------------------------\nlocal timeout = 3600 --export: timeout for the counter in seconds\nlocal update_time = 0.1 --export: cycle for the package of data\nlocal startPattern = \"[s]\" --export: pattern to indicate the start of the package\nlocal stopPattern = \"[e]\" --export: pattern to indicate the end of the package\nlocal clearDatabank = false --export: select to clear the databank when programming board started\nlocal stringMax = 1024 --export: max string lengh to transmite in one cycle\n\nunit.hide()\n-------------------------------\n---- SLOTS DETECTION ----------\n-------------------------------\nlocal screens = {}\nlocal databanks = {}\n\nlocal function initiateSlots()\n\tfor _, slot in pairs(unit) do\n\t\tif type(slot) == \"table\" and type(slot.export) == \"table\" and slot.getElementClass then\n\t\t\tlocal elementClass = slot.getElementClass():lower()\n\t\t\tif elementClass == \"databankunit\" then\n\t\t\t\ttable.insert(databanks,slot)\n\t\t\telseif elementClass == \"screenunit\" then\n\t\t\t\ttable.insert(screens,slot)\n\t\t\tend\n\t\tend\n\tend\n\t\n\tif #databanks < 1 then\n\t\terror(\"No databank connected!\")\n\tend\n\n\tif #screens < 1 then\n\t\tsystem.print(\"No screen connected!\")\n\t\t--error(\"No screen connected!\")\n\tend\n\t\n\ttable.sort(screens, function (a, b) return (a.getId() < b.getId()) end)\n\ttable.sort(databanks, function (a, b) return (a.getId() < b.getId()) end)\nend\n\ninitiateSlots()\n\nlocal databankSlot = databanks[1]\nif clearDatabank then\n\tdatabankSlot.clear()\nend\n\nlocal welcomeScreen = {}\nlocal statisticScreen = {}\nfor _, screen in ipairs(screens) do\n\tif screen.getScriptOutput() == \"welcome\" then\n\t\ttable.insert(welcomeScreen,screen)\n\telseif screen.getScriptOutput() == \"statistic\" then\n\t\ttable.insert(statisticScreen,screen)\n\tend\nend\n\n-------------------------------\n---- FUNCTIONS ----------------\n-------------------------------\nfunction string:split(sep)\n    local sep = sep or \",\"\n    local result = {}\n    local i = 1\n    for c in self:gmatch(string.format(\"([^%s]+)\", sep)) do\n        local n = tonumber(c)\n        if n then\n            result[i] = n\n        else\n            result[i] = c\n        end\n        i = i + 1\n    end\n    return result\nend\n\n-------------------------------\n---- IDENTIFY AND COUNT USER --\n-------------------------------\nlocal masterPlayerId = unit.getMasterPlayerId()\nlocal masterPlayerName = system.getPlayerName(masterPlayerId)\nlocal visitTime = math.floor(system.getArkTime())\n\nlocal user = {}\n\nlocal userString = databankSlot.getStringValue(masterPlayerId)\nif userString and userString ~= \"\" then\n\tuser = userString:split(\",\")\n\t--str:gsub(\".\",function(c) table.insert(t,c) end)\nelse\n\tuser = {masterPlayerId,masterPlayerName,visitTime,visitTime,1}\nend\n\nif visitTime - user[3] > timeout then\n\tuser[4] = user[3]\n\tuser[5] = user[5] + 1\nend\n\nuser[3] = visitTime\n\n-- record to the databank\ndatabankSlot.setStringValue(masterPlayerId,table.concat(user,\",\"))\n\n-------------------------------\n---- SHOW ON SCREEN -----------\n-------------------------------\nif #welcomeScreen > 0 then\n\tlocal data = {}\n\tdata[1] = masterPlayerName\n\n\tif user[5] > 1 then\n\t\tdata[2] = visitTime - user[4]\n\tend\n\n\tlocal dataString = table.concat(data,\",\")\n\t\n\tfor _, screen in ipairs(welcomeScreen) do\n\t\tscreen.setScriptInput(dataString)\n\tend\nend\n\nlocal dataString = \"\"\n\nif #statisticScreen > 0 then\n\tlocal keyListString = databankSlot.getKeys()\n\tlocal keyList = {}\n\tif keyListString and keyListString ~= \"\" then\n\t\tkeyList = json.decode(keyListString)\n\tend\n\n\tlocal users = {}\n\n\tfor _, id in ipairs(keyList) do\n\t\tlocal userObjectString = databankSlot.getStringValue(id)\n\t\tif userObjectString and userObjectString ~= \"\" then\n\t\t\tlocal userObject = userObjectString:split(\",\")\n\t\t\tuserObject[3] = visitTime - userObject[3]\n\t\t\tuserObject[4] = visitTime - userObject[4]\n\t\t\ttable.insert(users,table.concat(userObject,\",\"))\n\t\tend\n\tend\n\n\tdataString = table.concat(users,\";\")\n\t\n\tunit.setTimer(\"transmission\", update_time)\nend\n\n--system.print(\"string = \"..dataString)\n\nfunction transmission()\n\tif not isTransmissionInProgress then\n\t\tif dataString ~= \"\" then\n\t\t\tstringToTransmit = startPattern .. dataString .. stopPattern\n\t\t\t--system.print(\"stringToTransmit = \"..stringToTransmit)\n\t\t\tisTransmissionInProgress = true\n\t\telse\n\t\t\tunit.stopTimer(\"transmission\")\n\t\tend\n\tend\n\t\n\tlocal function sendToScreen(stringData)\n\t\tfor _, screen in ipairs(statisticScreen) do\n\t\t\tscreen.setScriptInput(stringData)\n\t\tend\n\tend\n\t\n\tif #stringToTransmit > stringMax then\n\t\tlocal stringPart = string.sub(stringToTransmit,1,stringMax)\n\t\tsendToScreen(stringPart)\n\t\tstringToTransmit = string.sub(stringToTransmit,stringMax+1)\n\telse\n\t\tsendToScreen(stringToTransmit)\n\t\tisTransmissionInProgress = false\n\t\tunit.stopTimer(\"transmission\")\n\t\tsystem.print(\"transmission complete\")\n\tend\nend","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"transmission()","filter":{"args":[{"value":"transmission"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"1"}],"methods":[],"events":[]}
