{"slots":{"0":{"name":"Databank","type":{"events":[],"methods":[]}},"1":{"name":"Screen2","type":{"events":[],"methods":[]}},"2":{"name":"Screen1","type":{"events":[],"methods":[]}},"3":{"name":"slot3","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"-------------------------------\n---- SCREEN EVENT -------------\n-------------------------------\n--mouseDown(*,*) event --------\n-------------------------------\nmouseClickEvent(x,y)\nsystem.print(\"Screen-2 x=\"..x*100 ..\" y=\"..y*100)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"1"},"key":"0"},{"code":"-------------------------------\n---- SCREEN EVENT -------------\n-------------------------------\n--mouseDown(*,*) event --------\n-------------------------------\nmouseClickEvent(x,y)\nsystem.print(\"Screen-1 x=\"..x*100 ..\" y=\"..y*100)\n\n","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"2"},"key":"1"},{"code":"-------------------------------\n---- SCREEN EVENT -------------\n-------------------------------\n--mouseDown(*,*) event --------\n-------------------------------\nmouseClickEvent(x,y)\nsystem.print(\"Screen-2 x=\"..x*100 ..\" y=\"..y*100)\n\n","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"3"},"key":"2"},{"code":"-- Welcome Screen info\n-- Created by SvarogZ\n-- 2021\n--\n--\n\nunit.hide()\n\n-------------------------------\n---- BUTTON CLASS -------------\n-------------------------------\nlocal ButtonStyleClass = {}\n\nfunction ButtonStyleClass:new(fontSize,fontColor,borderWidth,borderStyle,borderColor,borderRadius1,borderRadius2,backgroundColor)\n\t\n\tlocal privateObj = {\n\t\tfontSize = fontSize or 0, -- in vh, if \"0\" then adjusted automatically\n\t\tfontColor = fontColor or \"#F9E79F\",\n\t\tborderWidth = borderWidth or 0.5, -- in vh\n\t\tborderStyle = borderStyle or \"solid\", -- border-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|initial|inherit;\n\t\tborderColor = borderColor or \"#D35400\",\n\t\tborderRadius1 = borderRadius1 or 0, -- in vh\n\t\tborderRadius2 = borderRadius2 or 0, -- in vh\n\t\tbackgroundColor = backgroundColor or \"#2E4053\"\n\t}\n\t\n\tlocal publicObj = {}\n\t\n\tpublicObj.buttonStyle = [[border-width:]]..privateObj.borderWidth..[[vh ]]..privateObj.borderWidth..[[vw;border-style:]]..privateObj.borderStyle..[[;border-color:]]..privateObj.borderColor..[[;border-radius:]]..privateObj.borderRadius1..[[vh ]]..privateObj.borderRadius2..[[vh;background-color:]]..privateObj.backgroundColor..[[;color:]]..privateObj.fontColor..[[;]]\n\t\n\tfunction publicObj:getStyle(defFontSize)\n\t\tlocal fontSize = defFontSize or 1\n\t\tif privateObj.fontSize ~= 0 then\n\t\t\tfontSize = privateObj.fontSize\n\t\tend\n\t\t\n\t\treturn publicObj.buttonStyle..[[font-size:]]..fontSize..[[vh;]]\n\tend\n\n\t-- don't delete this\n\tself.__index = self\n\treturn setmetatable(publicObj, self)\nend\n\n\nlocal ButtonClass = {}\n\nfunction ButtonClass:new(screen,x1,y1,x2,y2,functionCall,callBackId,text,buttonNoneActiveStyle,buttonActiveStyle,svgIcon)\n\n\tlocal privateObj = {\n\t\tcontentId = nil,\n\t\tscreen = screen or error (\"screen must be specified\"),\n\t\tx1 = x1 or 0,\n\t\ty1 = y1 or 0,\n\t\tx2 = x2 or 0,\n\t\ty2 = y2 or 0,\n\t\ttext = text or \"\",\n\t\tfunctionCall = functionCall or error (\"function must be specified\"),\n\t\tcallBackId = callBackId,\n\t\tbuttonNoneActiveStyle = buttonNoneActiveStyle or error (\"buttonNoneActiveStyle must be specified\"),\n\t\tbuttonActiveStyle = buttonActiveStyle or error (\"buttonActiveStyle must be specified\"),\n\t\tsvgIcon = svgIcon,\n\t\tisActive = false\n\t}\n\n\tlocal function getContent(isPressed)\n\t\tlocal buttonStyle = \"\"\n\t\tif isPressed then\n\t\t\tborderStyle = privateObj.buttonActiveStyle:getStyle((privateObj.y2 - privateObj.y1)/2)\n\t\telse\n\t\t\tborderStyle = privateObj.buttonNoneActiveStyle:getStyle((privateObj.y2 - privateObj.y1)/2)\n\t\tend\n\n\t\treturn [[<div style=\"width:]]..(privateObj.x2 - privateObj.x1)..[[vw;height:]]..(privateObj.y2 - privateObj.y1)..[[vh;display:flex;justify-content:center;align-items:center;]]..borderStyle..[[\">]]..privateObj.text..[[</div>]]\t\t\n\tend\n\t\n\tlocal function redraw()\n\t\tif privateObj.contentId then\n\t\t\tif privateObj.isActive then\n\t\t\t\tprivateObj.screen.resetContent(privateObj.contentId,getContent(true))\n\t\t\telse\n\t\t\t\tprivateObj.screen.resetContent(privateObj.contentId,getContent(false))\n\t\t\tend\n\t\tend\n\tend\n\n\tlocal publicObj = {}\n\n\tfunction publicObj:update(x,y)\n\t\tif x > privateObj.x1 and x < privateObj.x2 and y > privateObj.y1 and y < privateObj.y2 then\n\t\t\tif not privateObj.isActive then\n\t\t\t\tprivateObj.isActive = true\n\t\t\t\tredraw()\n\t\t\tend\n\t\t\tprivateObj.functionCall(privateObj.callBackId)\n\t\telse\n\t\t\tif privateObj.isActive then\n\t\t\t\tprivateObj.isActive = false\n\t\t\t\tredraw()\n\t\t\tend\n\t\tend\n\tend\n\n\tfunction publicObj:draw()\n\t\tif not privateObj.contentId then\n\t\t\tprivateObj.contentId = privateObj.screen.addContent(privateObj.x1,privateObj.y1,getContent(false))\n\t\telse\n\t\t\tredraw()\n\t\tend\n\tend\n\n\t-- [[ functions below can be deleted if not required\n\tfunction publicObj:hide()\n\t\tprivateObj.screen.showContent(privateObj.contentId, 0)\n\tend\n\n\tfunction publicObj:show()\n\t\tprivateObj.screen.showContent(privateObj.contentId, 1)\n\tend\n\n\tfunction publicObj:isActive()\n\t\treturn privateObj.isActive\n\tend\n\n\tfunction publicObj:press()\n\t\tprivateObj.isActive = true\n\t\tredraw()\n\tend\n\n\tfunction publicObj:release()\n\t\tprivateObj.isActive = false\n\t\tredraw()\n\tend\n\n\tfunction publicObj:toggle()\n\t\tprivateObj.isActive = not privateObj.isActive\n\t\tredraw()\n\tend\n\n\tfunction publicObj:changeColors(borderColor,backgroundColor)\n\t\tif borderColor then privateObj.borderColor = borderColor end\n\t\tif backgroundColor then privateObj.backgroundColor = backgroundColor end\n\t\tredraw()\n\tend\n\n\tfunction publicObj:getContentId()\n\t\treturn privateObj.contentId\n\tend\n\n\tfunction publicObj:getCallBackId()\n\t\treturn privateObj.callBackId\n\tend\n\n\tfunction publicObj:setCallBackId(callBackId)\n\t\tprivateObj.callBackId = callBackId\n\tend\n\n\tfunction publicObj:setText(text)\n\t\tprivateObj.text = text\n\tend\n\n\tfunction publicObj:getArea()\n\t\treturn privateObj.x1,privateObj.y1,privateObj.x2,privateObj.y2\n\tend\n\n\tfunction publicObj:moveTo(x,y)\n\t\tprivateObj.screen.moveContent(privateObj.contentId,x,y)\n\tend\n\n\tfunction publicObj:setSize(x,y)\n\t\tprivateObj.x2 = privateObj.x1 + x\n\t\tprivateObj.y2 = privateObj.y1 + y\n\t\tredraw()\n\tend\n\n\tfunction publicObj:assignFunction(newFunction)\n\t\tprivateObj.functionCall = newFunction\n\tend\n\n\tfunction publicObj:moveToScreen(newScreen)\n\t\tif type(newScreen) == \"table\" and type(newScreen.getElementClass) == \"function\" then -- TODO add check for screen - newScreen.getElementClass() == \"ScreenUnit?\"\n\t\t\tprivateObj.screen.deleteContent(privateObj.contentId)\n\t\t\tprivateObj.contentId = nil\n\t\t\tprivateObj.screen = newScreen\n\t\t\tself:draw()\n\t\tend\n\tend\n\t-- functions above can be deleted if not required ]]\n\n\t-- don't delete this\n\tself.__index = self\n\treturn setmetatable(publicObj, self)\nend\n\n-------------------------------\n---- SLOTS DETECTION ----------\n-------------------------------\nlocal screens = {}\nlocal databanks = {}\n\nlocal function initiateSlots()\n\tfor _, slot in pairs(unit) do\n\t\tif type(slot) == \"table\" and type(slot.export) == \"table\" and slot.getElementClass then\n\t\t\tlocal elementClass = slot.getElementClass():lower()\n\t\t\tif elementClass == \"databankunit\" then\n\t\t\t\ttable.insert(databanks,slot)\n\t\t\telseif elementClass == \"screenunit\" then\n\t\t\t\ttable.insert(screens,slot)\n\t\t\tend\n\t\tend\n\tend\n\t\n\tif #databanks < 1 then\n\t\terror(\"No databank connected!\")\n\tend\n\n\tif #screens < 1 then\n\t\terror(\"No screen connected!\")\n\tend\n\t\n\ttable.sort(screens, function (a, b) return (a.getId() < b.getId()) end)\n\ttable.sort(databanks, function (a, b) return (a.getId() < b.getId()) end)\nend\n\ninitiateSlots()\n\nlocal showWelcomeScreen = true --export: select to show the welcome screen\nlocal showStatisticScreen = true --export: select to show the staictic screen\n\nlocal welcomeScreenSlot = screens[1]\nlocal statisticScreenSlot = screens[2]\n\nif showWelcomeScreen then\n\twelcomeScreenSlot.clear()\nelse\n\tstatisticScreenSlot = screens[1]\n\twelcomeScreenSlot = nil\nend\n\nif showStatisticScreen then\n\tif not statisticScreenSlot then\n\t\tsystem.print(\"Statistic screen (second) is not connected\")\n\telse\n\t\tstatisticScreenSlot.clear()\n\tend\nelse\n\tshowStatisticScreen = nil\nend\n\nlocal databankSlot = databanks[1]\nlocal clearDatabank = false --export: select to clear the databank when programming board started\nif clearDatabank then\n\tdatabankSlot.clear()\nend\n\n\n-------------------------------\n---- IDENTIFY AND COUNT USER --\n-------------------------------\nlocal masterPlayerId = unit.getMasterPlayerId()\nlocal masterPlayerName = system.getPlayerName(masterPlayerId)\nlocal visitTime = system.getTime()\n\nlocal user = {}\n\nlocal userString = databankSlot.getStringValue(masterPlayerId)\nif userString and usersString ~= \"\" then\n\tuser = json.decode(userString)\nelse\n\tuser.name = masterPlayerName\n\tuser.counter = 1\nend\n\nlocal timeout = 3600 --export: timeout for the counter in seconds\n\nif user.time and visitTime - user.time > timeout then\n\tuser.lastTime = user.time\n\tuser.counter = user.counter + 1\nend\n\nuser.time = visitTime\nlocal previousVisit = user.lastTime\n\nif user.name ~= masterPlayerName then\n\t--name is changed since last visit\n\tuser.previousName = user.name\n\tuser.name = masterPlayerName\nend\n\n-- record to the databank\ndatabankSlot.setStringValue(masterPlayerId,json.encode(user))\n\n-------------------------------\n---- FUNCTIONS ----------------\n-------------------------------\nlocal function dateFormat(t)\n\tlocal t = type(t)=='number' and t>0 and t or 0\n\tlocal text = \"\"\n\t\n\tlocal day = math.floor(t/86400)\n\tt = t%(24*3600)\n\tlocal hour = math.floor(t/3600)\n\tt = t%3600\n\tlocal minute = math.floor(t/60)\n\tt = t%60\n\tlocal second = math.floor(t)\n\n\tif day > 0 then text = day..\"d:\" end\n\tif day > 0 or hour > 0 then text = text..hour..\"h:\" end\n\n\treturn text..minute..\"m\"\nend\n\n-------------------------------\n---- WELCOME SCREEN -----------\n-------------------------------\nif welcomeScreenSlot then\n\tlocal durationString = \"This is your first visit\"\n\n\tif previousVisit then\n\t\tdurationString = \"You visited us \"..dateFormat(visitTime - previousVisit)..\" ago\"\n\tend\n\n\tlocal welcomeColor = \"#ffffff\" --export: Welcome screen: \"Welcome\" color\n\tlocal nameColor = \"#ffffff\" --export: Welcome screen: masterPlayerName color\n\tlocal infoColor = \"#ffffff\" --export: Welcome screen: Info text color\n\n\tlocal htmlWelcomScreen = [[<table style=\"height: 100%;width: 100%;text-align: center;\">\n\t\t<tr><td style=\"color: ]]..welcomeColor..[[;font-size: 20vh;\">Welcome</td></tr>\n\t\t<tr><td style=\"color: ]]..nameColor..[[;font-size: 30vh;\">]]..masterPlayerName..[[</td></tr>\n\t\t<tr><td style=\"color: ]]..infoColor..[[;font-size: 10vh;\">]]..durationString..[[</td></tr>\n\t</table>]]\n\n\twelcomeScreenSlot.setHTML(htmlWelcomScreen)\nend\n\n\n-------------------------------\n---- READ FROM DATABANK -------\n-------------------------------\nlocal keyListString = databankSlot.getKeys()\nlocal keyList = {}\nif keyListString and keyListString ~= \"\"then\n\tkeyList = json.decode(keyListString)\nend\n\nlocal users = {}\n\nfor _, id in ipairs(keyList) do\n\tlocal userObjectString = databankSlot.getStringValue(id)\n\tif userObjectString and userObjectString ~= \"\" then\n\t\tlocal userObject = json.decode(userObjectString)\n\t\tuserObject.id = id\n\t\ttable.insert(users,userObject)\n\tend\nend\n\n-------------------------------\n---- STATISTIC SCREEN ---------\n-------------------------------\nlocal buttonPanel = {} -- forward declaration\n\nif statisticScreenSlot then\n\n\tlocal numberRecords = #users\n\n\ttable.sort(users, function(a, b) return a.time > b.time end)\n\n\tlocal tableColor = \"#000000\" --export: Statistic screen: table background color\n\tlocal textColor = \"#FCFFA6\" --export: Statistic screen: table text color\n\tlocal headColor = \"#000000\"  --export: Statistic screen: head background color\n\tlocal numLinesToShow = 10\n\n\tcurrentList = 1 -- global\n\n\tlocal function showStaticticTable()\n\t\t\n\t\tlocal tableHeight = 90\n\t\tlocal recordsLeft = numberRecords - (currentList-1)*numLinesToShow\n\t\tif recordsLeft < numLinesToShow then tableHeight = tableHeight/numLinesToShow*recordsLeft end\n\t\t\n\t\tlocal htmlStaticticTable = {}\n\t\ttable.insert(htmlStaticticTable,[[<table style=\"width:100vw;height:]]..tableHeight..[[vh;text-align:center;font-size: 5vh;background-color: ]]..tableColor..[[;color: ]]..textColor..[[;\">\n\t<tr style=\"background-color: ]]..headColor..[[;\">\n\t<th>#</th>\n\t<th>ID</th>\n\t<th>Name</th>\n\t<th>Visit</th>\n\t<th>Pre. visit</th>\n\t<th>Visits</th>\n\t</tr>]])\n\t\t\n\t\tlocal firstLine = (currentList - 1) * 10 + 1\n\t\tlocal lastLine = firstLine + numLinesToShow - 1\n\t\tif lastLine > numberRecords then lastLine = numberRecords end\n\n\t\tfor i=firstLine,lastLine do\n\t\t\tlocal playerObject = users[i]\t\n\t\t\tlocal lastVisit = \"\"\n\t\t\tif playerObject.lastTime then\n\t\t\t\tlastVisit = dateFormat(visitTime - playerObject.lastTime)\n\t\t\tend\n\t\t\tlocal lineColor1 = \"#525252\" --export: Statistic screen: odd line color #839192\n\t\t\tlocal lineColor2 = \"#3B3B3B\" --export: Statistic screen: even line color #717D7E\n\t\t\tlocal backgroundColor = lineColor1\n\t\t\tif i%2 < 0.1 then\n\t\t\t\tbackgroundColor = lineColor2\n\t\t\tend\n\t\t\t\n\t\t\ttable.insert(htmlStaticticTable,[[\n\t<tr style=\"background-color:]]..backgroundColor..[[;\">\n\t\t<td>]]..i..[[</td>\n\t\t<td>]]..playerObject.id..[[</td>\n\t\t<td>]]..playerObject.name..[[</td>\n\t\t<td>]]..dateFormat(visitTime - playerObject.time)..[[</td>\n\t\t<td>]]..lastVisit..[[</td>\n\t\t<td>]]..playerObject.counter..[[</td>\n\t</tr>\n]])\n\t\tend\n\t\t\n\t\tif not statisticTableId then\n\t\t\tstatisticTableId = statisticScreenSlot.addContent(0,0,table.concat(htmlStaticticTable) .. [[</table>]])\n\t\telse\n\t\t\tstatisticScreenSlot.resetContent(statisticTableId,table.concat(htmlStaticticTable) .. [[</table>]])\n\t\tend\t\n\tend\n\n\tshowStaticticTable()\n\n\t--ButtonStyleClass:new(fontSize,fontColor,borderWidth,borderStyle,borderColor,borderRadius1,borderRadius2,backgroundColor)\n\tlocal buttonStyleOutset = ButtonStyleClass:new(0,nil,nil,nil,nil,2,2,nil)\n\tlocal buttonStyleInset = ButtonStyleClass:new(0,nil,1,nil,\"#A93226\",2,2,\"#07006C\")\n\n\tlocal function updateButtonPanel()\n\t\tlocal numberOfButtons = (numberRecords -1)//numLinesToShow + 1\n\t\tif numberOfButtons < 7 then return end\n\n\t\tlocal buttonShift = 0\n\t\tif currentList > 4 then\n\t\t\tif currentList < numberOfButtons - 3 then\n\t\t\t\tbuttonShift = currentList - 4\n\t\t\telse\n\t\t\t\tbuttonShift = numberOfButtons - 7\n\t\t\tend\n\t\tend\n\n\t\tfor _,button in pairs(buttonPanel) do\n\t\t\tlocal contentId = button:getCallBackId()\n\t\t\tif contentId ~= \"prev.\" and contentId ~= \"next\" then\n\t\t\t\tbuttonShift = buttonShift + 1\n\t\t\t\tbutton:setCallBackId(buttonShift)\n\t\t\t\tbutton:setText(buttonShift)\n\t\t\tend\n\t\tend\n\tend\n\n\tlocal function callButton(callBackId)\n\n\t\tif callBackId == \"prev.\" then\n\t\t\tif currentList > 1 then currentList = currentList - 1 end\n\t\telseif callBackId == \"next\" then\n\t\t\tif numberRecords - currentList * numLinesToShow > 0 then\n\t\t\t\tcurrentList = currentList + 1\n\t\t\tend\n\t\telseif type(callBackId) == 'number' then\n\t\t\tcurrentList = callBackId\n\t\tend\n\t\t\n\t\tshowStaticticTable()\n\t\tupdateButtonPanel()\n\tend\n\n\t--ButtonClass:new(screen,x1,y1,x2,y2,functionCall,text,buttonNoneActiveStyle,buttonActiveStyle,svgIcon)\n\tbuttonPanel[\"prev.\"] = ButtonClass:new(statisticScreenSlot,5,90,15,100,callButton,\"prev.\",\"prev.\",buttonStyleOutset,buttonStyleOutset)\n\tbuttonPanel[\"prev.\"]:draw()\n\n\tlocal numberOfButtons = numberRecords//numLinesToShow + 1\n\tif numberOfButtons > 7 then numberOfButtons = 7 end\n\tlocal buttonwidth = 70 / 7\n\n\tfor n = 1,numberOfButtons,1 do\n\t\tbuttonPanel[n] = ButtonClass:new(statisticScreenSlot,5+n*buttonwidth,90,15+n*buttonwidth,100,callButton,n,n,buttonStyleOutset,buttonStyleInset)\n\t\tbuttonPanel[n]:draw()\n\tend\n\n\tbuttonPanel[\"next\"] = ButtonClass:new(statisticScreenSlot,85,90,95,100,callButton,\"next\",\"next\",buttonStyleOutset,buttonStyleOutset)\n\tbuttonPanel[\"next\"]:draw()\n\n\tbuttonPanel[1]:press()\nend\n\nfunction mouseClickEvent(x,y)\n\tlocal xs = x*100\n\tlocal ys = y*100\n\t--system.print(\"Function x=\"..xs ..\" y=\"..ys)\n\t--check clickable zone\n\tif xs > 5 and ys > 90 and xs < 95 then\n\t\t-- perform button command\n\t\tfor _,button in pairs(buttonPanel) do\n\t\t\tbutton:update(xs,ys)\n\t\tend\n\t\t\n\t\t-- update visual status for all buttons\n\t\tfor _,button in pairs(buttonPanel) do\n\t\t\tlocal callBackId = button:getCallBackId()\n\t\t\tif type(callBackId) == 'number' and callBackId == currentList then\n\t\t\t\tbutton:press()\n\t\t\telse\n\t\t\t\tbutton:release()\n\t\t\tend\n\t\tend\n\tend\nend\n\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"3"}],"methods":[],"events":[]}
